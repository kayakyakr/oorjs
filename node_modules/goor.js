
var url = require('url');
var mime = require('./mime');

module.exports = Class({
  constructor: function(config){
    this.apply(config);
  },
  
  handle_request: function(){
    this.path_data = url.parse(this.request.url);
    this.interpret_path();
    this.get_payload();
  },
  
  get_payload: function(){
    var resolution = {};
    try{
      resolution['controller'] = require.resolve(process.cwd() + '/app/controllers/' + path_data.controller);
      resolution['type'] = 'action';
      resolution.applyIf(path_data);
    }
    catch(e){
      // We didn't find the controller, now look under the public directory and send that back
      var path = process.cwd() + '/public' + this.path_data.pathname;
      require('fs').readFile(path, function(err, data){
        if(err){
          this.respond('File not found', 404);
        }
        else{
          this.respond(data, 200, mime.lookupExtension(require('path').extname(path)))
        }
      }.bind(this));
      return;
    }
    
    this.respond(resolution);
    // check the method: GET requests get forwarded to index and show or the specified action
    // POST, UPDATE, and DELETE requests are forwarded to their respective actions
    // protect create, update, and destroy from being called via GET
    
  },

  interpret_path: function(){
    var path_name = this.path_data.pathname,
          path_array = path_name.split('/'),
          root = path_array.shift();
      // The auto-interpreter assumes the first path is the controller. if there is no 2nd, it calls index.
      // If the 2nd param is a function on the controller, that is called, otherwise the 2nd parameter is sent
      // as param[:id]. The 3rd parameter, then, is either the first part of a params array or is the action to call
    this.path_data['controller'] = path_array.shift();
    this.path_data['id'] = path_array.shift();
    this.path_data['action'] = path_array.shift();
  },
  
  respond: function(body, status, mime_type){
    status = status || 200;
    this.response.writeHead(status, {'Content-Type': mime_type || 'text/plain'});
    this.response.end(body);
  }
});
