var emitter = require('events');

Object.defineProperty(Object.prototype, 'extend', {value: function(ext){
  var ext_proto = Object.create(ext.prototype);
  
  for(var e in ext_proto){
    this.prototype[e] = ext_proto[e];
  }
  
  return this;
}});

Class = function(inherit, config){
  if(!config && typeof(inherit) !== 'function'){
    config = inherit;
    inherit = function(){};
  }
  
  var constr = config['constructor'];
  
  //delete config['constructor'];
  
  var cls = constr || function(){};
  cls.prototype = Object.create(inherit.prototype);
  
  var priv = config['private'];
  delete config['private'];
  var prot = config['protected'];
  delete config['protected'];
  
  for(var p in config){
    cls.prototype[p] = config[p];
  }
  
  cls.prototype.superclass = inherit.prototype;
  // do something with the private and protected methods here
  
  return cls;
}
